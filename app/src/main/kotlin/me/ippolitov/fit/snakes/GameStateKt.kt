//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: snakes.proto

package me.ippolitov.fit.snakes;

@kotlin.jvm.JvmName("-initializegameState")
public inline fun gameState(block: me.ippolitov.fit.snakes.GameStateKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameState =
  me.ippolitov.fit.snakes.GameStateKt.Dsl._create(me.ippolitov.fit.snakes.SnakesProto.GameState.newBuilder()).apply { block() }._build()
public object GameStateKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: me.ippolitov.fit.snakes.SnakesProto.GameState.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: me.ippolitov.fit.snakes.SnakesProto.GameState.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): me.ippolitov.fit.snakes.SnakesProto.GameState = _builder.build()

    /**
     * <pre>
     * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
     * </pre>
     *
     * <code>required int32 state_order = 1;</code>
     */
    public var stateOrder: kotlin.Int
      @JvmName("getStateOrder")
      get() = _builder.getStateOrder()
      @JvmName("setStateOrder")
      set(value) {
        _builder.setStateOrder(value)
      }
    /**
     * <pre>
     * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
     * </pre>
     *
     * <code>required int32 state_order = 1;</code>
     */
    public fun clearStateOrder() {
      _builder.clearStateOrder()
    }
    /**
     * <pre>
     * Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
     * </pre>
     *
     * <code>required int32 state_order = 1;</code>
     * @return Whether the stateOrder field is set.
     */
    public fun hasStateOrder(): kotlin.Boolean {
      return _builder.hasStateOrder()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class SnakesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
     public val snakes: com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameState.Snake, SnakesProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getSnakesList()
      )
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     * @param value The snakes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addSnakes")
    public fun com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameState.Snake, SnakesProxy>.add(value: me.ippolitov.fit.snakes.SnakesProto.GameState.Snake) {
      _builder.addSnakes(value)
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     * @param value The snakes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignSnakes")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameState.Snake, SnakesProxy>.plusAssign(value: me.ippolitov.fit.snakes.SnakesProto.GameState.Snake) {
      add(value)
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     * @param values The snakes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllSnakes")
    public fun com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameState.Snake, SnakesProxy>.addAll(values: kotlin.collections.Iterable<me.ippolitov.fit.snakes.SnakesProto.GameState.Snake>) {
      _builder.addAllSnakes(values)
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     * @param values The snakes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllSnakes")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameState.Snake, SnakesProxy>.plusAssign(values: kotlin.collections.Iterable<me.ippolitov.fit.snakes.SnakesProto.GameState.Snake>) {
      addAll(values)
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     * @param index The index to set the value at.
     * @param value The snakes to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setSnakes")
    public operator fun com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameState.Snake, SnakesProxy>.set(index: kotlin.Int, value: me.ippolitov.fit.snakes.SnakesProto.GameState.Snake) {
      _builder.setSnakes(index, value)
    }
    /**
     * <pre>
     * Список змей
     * </pre>
     *
     * <code>repeated .snakes.GameState.Snake snakes = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearSnakes")
    public fun com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameState.Snake, SnakesProxy>.clear() {
      _builder.clearSnakes()
    }


    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class FoodsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
     public val foods: com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameState.Coord, FoodsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getFoodsList()
      )
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     * @param value The foods to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addFoods")
    public fun com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameState.Coord, FoodsProxy>.add(value: me.ippolitov.fit.snakes.SnakesProto.GameState.Coord) {
      _builder.addFoods(value)
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     * @param value The foods to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignFoods")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameState.Coord, FoodsProxy>.plusAssign(value: me.ippolitov.fit.snakes.SnakesProto.GameState.Coord) {
      add(value)
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     * @param values The foods to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllFoods")
    public fun com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameState.Coord, FoodsProxy>.addAll(values: kotlin.collections.Iterable<me.ippolitov.fit.snakes.SnakesProto.GameState.Coord>) {
      _builder.addAllFoods(values)
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     * @param values The foods to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllFoods")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameState.Coord, FoodsProxy>.plusAssign(values: kotlin.collections.Iterable<me.ippolitov.fit.snakes.SnakesProto.GameState.Coord>) {
      addAll(values)
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     * @param index The index to set the value at.
     * @param value The foods to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setFoods")
    public operator fun com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameState.Coord, FoodsProxy>.set(index: kotlin.Int, value: me.ippolitov.fit.snakes.SnakesProto.GameState.Coord) {
      _builder.setFoods(index, value)
    }
    /**
     * <pre>
     * Список клеток с едой
     * </pre>
     *
     * <code>repeated .snakes.GameState.Coord foods = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearFoods")
    public fun com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameState.Coord, FoodsProxy>.clear() {
      _builder.clearFoods()
    }


    /**
     * <pre>
     * Актуальнейший список игроков
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 4;</code>
     */
    public var players: me.ippolitov.fit.snakes.SnakesProto.GamePlayers
      @JvmName("getPlayers")
      get() = _builder.getPlayers()
      @JvmName("setPlayers")
      set(value) {
        _builder.setPlayers(value)
      }
    /**
     * <pre>
     * Актуальнейший список игроков
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 4;</code>
     */
    public fun clearPlayers() {
      _builder.clearPlayers()
    }
    /**
     * <pre>
     * Актуальнейший список игроков
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 4;</code>
     * @return Whether the players field is set.
     */
    public fun hasPlayers(): kotlin.Boolean {
      return _builder.hasPlayers()
    }
  }
  @kotlin.jvm.JvmName("-initializecoord")
  public inline fun coord(block: me.ippolitov.fit.snakes.GameStateKt.CoordKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameState.Coord =
    me.ippolitov.fit.snakes.GameStateKt.CoordKt.Dsl._create(me.ippolitov.fit.snakes.SnakesProto.GameState.Coord.newBuilder()).apply { block() }._build()
  public object CoordKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: me.ippolitov.fit.snakes.SnakesProto.GameState.Coord.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: me.ippolitov.fit.snakes.SnakesProto.GameState.Coord.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): me.ippolitov.fit.snakes.SnakesProto.GameState.Coord = _builder.build()

      /**
       * <pre>
       * По горизонтальной оси, положительное направление - вправо
       * </pre>
       *
       * <code>optional sint32 x = 1 [default = 0];</code>
       */
      public var x: kotlin.Int
        @JvmName("getX")
        get() = _builder.getX()
        @JvmName("setX")
        set(value) {
          _builder.setX(value)
        }
      /**
       * <pre>
       * По горизонтальной оси, положительное направление - вправо
       * </pre>
       *
       * <code>optional sint32 x = 1 [default = 0];</code>
       */
      public fun clearX() {
        _builder.clearX()
      }
      /**
       * <pre>
       * По горизонтальной оси, положительное направление - вправо
       * </pre>
       *
       * <code>optional sint32 x = 1 [default = 0];</code>
       * @return Whether the x field is set.
       */
      public fun hasX(): kotlin.Boolean {
        return _builder.hasX()
      }

      /**
       * <pre>
       * По вертикальной оси, положительное направление - вниз
       * </pre>
       *
       * <code>optional sint32 y = 2 [default = 0];</code>
       */
      public var y: kotlin.Int
        @JvmName("getY")
        get() = _builder.getY()
        @JvmName("setY")
        set(value) {
          _builder.setY(value)
        }
      /**
       * <pre>
       * По вертикальной оси, положительное направление - вниз
       * </pre>
       *
       * <code>optional sint32 y = 2 [default = 0];</code>
       */
      public fun clearY() {
        _builder.clearY()
      }
      /**
       * <pre>
       * По вертикальной оси, положительное направление - вниз
       * </pre>
       *
       * <code>optional sint32 y = 2 [default = 0];</code>
       * @return Whether the y field is set.
       */
      public fun hasY(): kotlin.Boolean {
        return _builder.hasY()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializesnake")
  public inline fun snake(block: me.ippolitov.fit.snakes.GameStateKt.SnakeKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameState.Snake =
    me.ippolitov.fit.snakes.GameStateKt.SnakeKt.Dsl._create(me.ippolitov.fit.snakes.SnakesProto.GameState.Snake.newBuilder()).apply { block() }._build()
  public object SnakeKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: me.ippolitov.fit.snakes.SnakesProto.GameState.Snake.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: me.ippolitov.fit.snakes.SnakesProto.GameState.Snake.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): me.ippolitov.fit.snakes.SnakesProto.GameState.Snake = _builder.build()

      /**
       * <pre>
       * Идентификатор игрока-владельца змеи, см. GamePlayer.id
       * </pre>
       *
       * <code>required int32 player_id = 1;</code>
       */
      public var playerId: kotlin.Int
        @JvmName("getPlayerId")
        get() = _builder.getPlayerId()
        @JvmName("setPlayerId")
        set(value) {
          _builder.setPlayerId(value)
        }
      /**
       * <pre>
       * Идентификатор игрока-владельца змеи, см. GamePlayer.id
       * </pre>
       *
       * <code>required int32 player_id = 1;</code>
       */
      public fun clearPlayerId() {
        _builder.clearPlayerId()
      }
      /**
       * <pre>
       * Идентификатор игрока-владельца змеи, см. GamePlayer.id
       * </pre>
       *
       * <code>required int32 player_id = 1;</code>
       * @return Whether the playerId field is set.
       */
      public fun hasPlayerId(): kotlin.Boolean {
        return _builder.hasPlayerId()
      }

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      public class PointsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
       public val points: com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameState.Coord, PointsProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getPointsList()
        )
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       * @param value The points to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addPoints")
      public fun com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameState.Coord, PointsProxy>.add(value: me.ippolitov.fit.snakes.SnakesProto.GameState.Coord) {
        _builder.addPoints(value)
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       * @param value The points to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignPoints")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameState.Coord, PointsProxy>.plusAssign(value: me.ippolitov.fit.snakes.SnakesProto.GameState.Coord) {
        add(value)
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       * @param values The points to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllPoints")
      public fun com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameState.Coord, PointsProxy>.addAll(values: kotlin.collections.Iterable<me.ippolitov.fit.snakes.SnakesProto.GameState.Coord>) {
        _builder.addAllPoints(values)
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       * @param values The points to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllPoints")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameState.Coord, PointsProxy>.plusAssign(values: kotlin.collections.Iterable<me.ippolitov.fit.snakes.SnakesProto.GameState.Coord>) {
        addAll(values)
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       * @param index The index to set the value at.
       * @param value The points to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setPoints")
      public operator fun com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameState.Coord, PointsProxy>.set(index: kotlin.Int, value: me.ippolitov.fit.snakes.SnakesProto.GameState.Coord) {
        _builder.setPoints(index, value)
      }
      /**
       * <pre>
       * Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
       * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей,
       * в частности последняя точка хранит смещение хвоста змеи относительно предыдущей "ключевой" точки. 
       * </pre>
       *
       * <code>repeated .snakes.GameState.Coord points = 2;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearPoints")
      public fun com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameState.Coord, PointsProxy>.clear() {
        _builder.clearPoints()
      }


      /**
       * <pre>
       * статус змеи в игре
       * </pre>
       *
       * <code>required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
       */
      public var state: me.ippolitov.fit.snakes.SnakesProto.GameState.Snake.SnakeState
        @JvmName("getState")
        get() = _builder.getState()
        @JvmName("setState")
        set(value) {
          _builder.setState(value)
        }
      /**
       * <pre>
       * статус змеи в игре
       * </pre>
       *
       * <code>required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
       */
      public fun clearState() {
        _builder.clearState()
      }
      /**
       * <pre>
       * статус змеи в игре
       * </pre>
       *
       * <code>required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];</code>
       * @return Whether the state field is set.
       */
      public fun hasState(): kotlin.Boolean {
        return _builder.hasState()
      }

      /**
       * <pre>
       * Направление, в котором "повёрнута" голова змейки в текущий момент
       * </pre>
       *
       * <code>required .snakes.Direction head_direction = 4;</code>
       */
      public var headDirection: me.ippolitov.fit.snakes.SnakesProto.Direction
        @JvmName("getHeadDirection")
        get() = _builder.getHeadDirection()
        @JvmName("setHeadDirection")
        set(value) {
          _builder.setHeadDirection(value)
        }
      /**
       * <pre>
       * Направление, в котором "повёрнута" голова змейки в текущий момент
       * </pre>
       *
       * <code>required .snakes.Direction head_direction = 4;</code>
       */
      public fun clearHeadDirection() {
        _builder.clearHeadDirection()
      }
      /**
       * <pre>
       * Направление, в котором "повёрнута" голова змейки в текущий момент
       * </pre>
       *
       * <code>required .snakes.Direction head_direction = 4;</code>
       * @return Whether the headDirection field is set.
       */
      public fun hasHeadDirection(): kotlin.Boolean {
        return _builder.hasHeadDirection()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun me.ippolitov.fit.snakes.SnakesProto.GameState.copy(block: me.ippolitov.fit.snakes.GameStateKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameState =
  me.ippolitov.fit.snakes.GameStateKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun me.ippolitov.fit.snakes.SnakesProto.GameState.Coord.copy(block: me.ippolitov.fit.snakes.GameStateKt.CoordKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameState.Coord =
  me.ippolitov.fit.snakes.GameStateKt.CoordKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun me.ippolitov.fit.snakes.SnakesProto.GameState.Snake.copy(block: me.ippolitov.fit.snakes.GameStateKt.SnakeKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameState.Snake =
  me.ippolitov.fit.snakes.GameStateKt.SnakeKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val me.ippolitov.fit.snakes.SnakesProto.GameStateOrBuilder.playersOrNull: me.ippolitov.fit.snakes.SnakesProto.GamePlayers?
  get() = if (hasPlayers()) getPlayers() else null

