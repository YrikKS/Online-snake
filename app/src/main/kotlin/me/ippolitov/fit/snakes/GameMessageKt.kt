//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: snakes.proto

package me.ippolitov.fit.snakes;

@kotlin.jvm.JvmName("-initializegameMessage")
public inline fun gameMessage(block: me.ippolitov.fit.snakes.GameMessageKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameMessage =
  me.ippolitov.fit.snakes.GameMessageKt.Dsl._create(me.ippolitov.fit.snakes.SnakesProto.GameMessage.newBuilder()).apply { block() }._build()
public object GameMessageKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: me.ippolitov.fit.snakes.SnakesProto.GameMessage.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: me.ippolitov.fit.snakes.SnakesProto.GameMessage.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): me.ippolitov.fit.snakes.SnakesProto.GameMessage = _builder.build()

    /**
     * <pre>
     * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
     * </pre>
     *
     * <code>required int64 msg_seq = 1;</code>
     */
    public var msgSeq: kotlin.Long
      @JvmName("getMsgSeq")
      get() = _builder.getMsgSeq()
      @JvmName("setMsgSeq")
      set(value) {
        _builder.setMsgSeq(value)
      }
    /**
     * <pre>
     * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
     * </pre>
     *
     * <code>required int64 msg_seq = 1;</code>
     */
    public fun clearMsgSeq() {
      _builder.clearMsgSeq()
    }
    /**
     * <pre>
     * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
     * </pre>
     *
     * <code>required int64 msg_seq = 1;</code>
     * @return Whether the msgSeq field is set.
     */
    public fun hasMsgSeq(): kotlin.Boolean {
      return _builder.hasMsgSeq()
    }

    /**
     * <pre>
     * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     *
     * <code>optional int32 sender_id = 10;</code>
     */
    public var senderId: kotlin.Int
      @JvmName("getSenderId")
      get() = _builder.getSenderId()
      @JvmName("setSenderId")
      set(value) {
        _builder.setSenderId(value)
      }
    /**
     * <pre>
     * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     *
     * <code>optional int32 sender_id = 10;</code>
     */
    public fun clearSenderId() {
      _builder.clearSenderId()
    }
    /**
     * <pre>
     * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     *
     * <code>optional int32 sender_id = 10;</code>
     * @return Whether the senderId field is set.
     */
    public fun hasSenderId(): kotlin.Boolean {
      return _builder.hasSenderId()
    }

    /**
     * <pre>
     * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     *
     * <code>optional int32 receiver_id = 11;</code>
     */
    public var receiverId: kotlin.Int
      @JvmName("getReceiverId")
      get() = _builder.getReceiverId()
      @JvmName("setReceiverId")
      set(value) {
        _builder.setReceiverId(value)
      }
    /**
     * <pre>
     * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     *
     * <code>optional int32 receiver_id = 11;</code>
     */
    public fun clearReceiverId() {
      _builder.clearReceiverId()
    }
    /**
     * <pre>
     * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     *
     * <code>optional int32 receiver_id = 11;</code>
     * @return Whether the receiverId field is set.
     */
    public fun hasReceiverId(): kotlin.Boolean {
      return _builder.hasReceiverId()
    }

    /**
     * <code>.snakes.GameMessage.PingMsg ping = 2;</code>
     */
    public var ping: me.ippolitov.fit.snakes.SnakesProto.GameMessage.PingMsg
      @JvmName("getPing")
      get() = _builder.getPing()
      @JvmName("setPing")
      set(value) {
        _builder.setPing(value)
      }
    /**
     * <code>.snakes.GameMessage.PingMsg ping = 2;</code>
     */
    public fun clearPing() {
      _builder.clearPing()
    }
    /**
     * <code>.snakes.GameMessage.PingMsg ping = 2;</code>
     * @return Whether the ping field is set.
     */
    public fun hasPing(): kotlin.Boolean {
      return _builder.hasPing()
    }

    /**
     * <code>.snakes.GameMessage.SteerMsg steer = 3;</code>
     */
    public var steer: me.ippolitov.fit.snakes.SnakesProto.GameMessage.SteerMsg
      @JvmName("getSteer")
      get() = _builder.getSteer()
      @JvmName("setSteer")
      set(value) {
        _builder.setSteer(value)
      }
    /**
     * <code>.snakes.GameMessage.SteerMsg steer = 3;</code>
     */
    public fun clearSteer() {
      _builder.clearSteer()
    }
    /**
     * <code>.snakes.GameMessage.SteerMsg steer = 3;</code>
     * @return Whether the steer field is set.
     */
    public fun hasSteer(): kotlin.Boolean {
      return _builder.hasSteer()
    }

    /**
     * <code>.snakes.GameMessage.AckMsg ack = 4;</code>
     */
    public var ack: me.ippolitov.fit.snakes.SnakesProto.GameMessage.AckMsg
      @JvmName("getAck")
      get() = _builder.getAck()
      @JvmName("setAck")
      set(value) {
        _builder.setAck(value)
      }
    /**
     * <code>.snakes.GameMessage.AckMsg ack = 4;</code>
     */
    public fun clearAck() {
      _builder.clearAck()
    }
    /**
     * <code>.snakes.GameMessage.AckMsg ack = 4;</code>
     * @return Whether the ack field is set.
     */
    public fun hasAck(): kotlin.Boolean {
      return _builder.hasAck()
    }

    /**
     * <code>.snakes.GameMessage.StateMsg state = 5;</code>
     */
    public var state: me.ippolitov.fit.snakes.SnakesProto.GameMessage.StateMsg
      @JvmName("getState")
      get() = _builder.getState()
      @JvmName("setState")
      set(value) {
        _builder.setState(value)
      }
    /**
     * <code>.snakes.GameMessage.StateMsg state = 5;</code>
     */
    public fun clearState() {
      _builder.clearState()
    }
    /**
     * <code>.snakes.GameMessage.StateMsg state = 5;</code>
     * @return Whether the state field is set.
     */
    public fun hasState(): kotlin.Boolean {
      return _builder.hasState()
    }

    /**
     * <code>.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
     */
    public var announcement: me.ippolitov.fit.snakes.SnakesProto.GameMessage.AnnouncementMsg
      @JvmName("getAnnouncement")
      get() = _builder.getAnnouncement()
      @JvmName("setAnnouncement")
      set(value) {
        _builder.setAnnouncement(value)
      }
    /**
     * <code>.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
     */
    public fun clearAnnouncement() {
      _builder.clearAnnouncement()
    }
    /**
     * <code>.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
     * @return Whether the announcement field is set.
     */
    public fun hasAnnouncement(): kotlin.Boolean {
      return _builder.hasAnnouncement()
    }

    /**
     * <code>.snakes.GameMessage.JoinMsg join = 7;</code>
     */
    public var join: me.ippolitov.fit.snakes.SnakesProto.GameMessage.JoinMsg
      @JvmName("getJoin")
      get() = _builder.getJoin()
      @JvmName("setJoin")
      set(value) {
        _builder.setJoin(value)
      }
    /**
     * <code>.snakes.GameMessage.JoinMsg join = 7;</code>
     */
    public fun clearJoin() {
      _builder.clearJoin()
    }
    /**
     * <code>.snakes.GameMessage.JoinMsg join = 7;</code>
     * @return Whether the join field is set.
     */
    public fun hasJoin(): kotlin.Boolean {
      return _builder.hasJoin()
    }

    /**
     * <code>.snakes.GameMessage.ErrorMsg error = 8;</code>
     */
    public var error: me.ippolitov.fit.snakes.SnakesProto.GameMessage.ErrorMsg
      @JvmName("getError")
      get() = _builder.getError()
      @JvmName("setError")
      set(value) {
        _builder.setError(value)
      }
    /**
     * <code>.snakes.GameMessage.ErrorMsg error = 8;</code>
     */
    public fun clearError() {
      _builder.clearError()
    }
    /**
     * <code>.snakes.GameMessage.ErrorMsg error = 8;</code>
     * @return Whether the error field is set.
     */
    public fun hasError(): kotlin.Boolean {
      return _builder.hasError()
    }

    /**
     * <code>.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
     */
    public var roleChange: me.ippolitov.fit.snakes.SnakesProto.GameMessage.RoleChangeMsg
      @JvmName("getRoleChange")
      get() = _builder.getRoleChange()
      @JvmName("setRoleChange")
      set(value) {
        _builder.setRoleChange(value)
      }
    /**
     * <code>.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
     */
    public fun clearRoleChange() {
      _builder.clearRoleChange()
    }
    /**
     * <code>.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
     * @return Whether the roleChange field is set.
     */
    public fun hasRoleChange(): kotlin.Boolean {
      return _builder.hasRoleChange()
    }

    /**
     * <code>.snakes.GameMessage.DiscoverMsg discover = 12;</code>
     */
    public var discover: me.ippolitov.fit.snakes.SnakesProto.GameMessage.DiscoverMsg
      @JvmName("getDiscover")
      get() = _builder.getDiscover()
      @JvmName("setDiscover")
      set(value) {
        _builder.setDiscover(value)
      }
    /**
     * <code>.snakes.GameMessage.DiscoverMsg discover = 12;</code>
     */
    public fun clearDiscover() {
      _builder.clearDiscover()
    }
    /**
     * <code>.snakes.GameMessage.DiscoverMsg discover = 12;</code>
     * @return Whether the discover field is set.
     */
    public fun hasDiscover(): kotlin.Boolean {
      return _builder.hasDiscover()
    }
    public val typeCase: me.ippolitov.fit.snakes.SnakesProto.GameMessage.TypeCase
      @JvmName("getTypeCase")
      get() = _builder.getTypeCase()

    public fun clearType() {
      _builder.clearType()
    }
  }
  @kotlin.jvm.JvmName("-initializepingMsg")
  public inline fun pingMsg(block: me.ippolitov.fit.snakes.GameMessageKt.PingMsgKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameMessage.PingMsg =
    me.ippolitov.fit.snakes.GameMessageKt.PingMsgKt.Dsl._create(me.ippolitov.fit.snakes.SnakesProto.GameMessage.PingMsg.newBuilder()).apply { block() }._build()
  public object PingMsgKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: me.ippolitov.fit.snakes.SnakesProto.GameMessage.PingMsg.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: me.ippolitov.fit.snakes.SnakesProto.GameMessage.PingMsg.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): me.ippolitov.fit.snakes.SnakesProto.GameMessage.PingMsg = _builder.build()
    }
  }
  @kotlin.jvm.JvmName("-initializesteerMsg")
  public inline fun steerMsg(block: me.ippolitov.fit.snakes.GameMessageKt.SteerMsgKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameMessage.SteerMsg =
    me.ippolitov.fit.snakes.GameMessageKt.SteerMsgKt.Dsl._create(me.ippolitov.fit.snakes.SnakesProto.GameMessage.SteerMsg.newBuilder()).apply { block() }._build()
  public object SteerMsgKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: me.ippolitov.fit.snakes.SnakesProto.GameMessage.SteerMsg.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: me.ippolitov.fit.snakes.SnakesProto.GameMessage.SteerMsg.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): me.ippolitov.fit.snakes.SnakesProto.GameMessage.SteerMsg = _builder.build()

      /**
       * <pre>
       * Куда повернуть на следующем шаге
       * </pre>
       *
       * <code>required .snakes.Direction direction = 1;</code>
       */
      public var direction: me.ippolitov.fit.snakes.SnakesProto.Direction
        @JvmName("getDirection")
        get() = _builder.getDirection()
        @JvmName("setDirection")
        set(value) {
          _builder.setDirection(value)
        }
      /**
       * <pre>
       * Куда повернуть на следующем шаге
       * </pre>
       *
       * <code>required .snakes.Direction direction = 1;</code>
       */
      public fun clearDirection() {
        _builder.clearDirection()
      }
      /**
       * <pre>
       * Куда повернуть на следующем шаге
       * </pre>
       *
       * <code>required .snakes.Direction direction = 1;</code>
       * @return Whether the direction field is set.
       */
      public fun hasDirection(): kotlin.Boolean {
        return _builder.hasDirection()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializeackMsg")
  public inline fun ackMsg(block: me.ippolitov.fit.snakes.GameMessageKt.AckMsgKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameMessage.AckMsg =
    me.ippolitov.fit.snakes.GameMessageKt.AckMsgKt.Dsl._create(me.ippolitov.fit.snakes.SnakesProto.GameMessage.AckMsg.newBuilder()).apply { block() }._build()
  public object AckMsgKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: me.ippolitov.fit.snakes.SnakesProto.GameMessage.AckMsg.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: me.ippolitov.fit.snakes.SnakesProto.GameMessage.AckMsg.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): me.ippolitov.fit.snakes.SnakesProto.GameMessage.AckMsg = _builder.build()
    }
  }
  @kotlin.jvm.JvmName("-initializestateMsg")
  public inline fun stateMsg(block: me.ippolitov.fit.snakes.GameMessageKt.StateMsgKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameMessage.StateMsg =
    me.ippolitov.fit.snakes.GameMessageKt.StateMsgKt.Dsl._create(me.ippolitov.fit.snakes.SnakesProto.GameMessage.StateMsg.newBuilder()).apply { block() }._build()
  public object StateMsgKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: me.ippolitov.fit.snakes.SnakesProto.GameMessage.StateMsg.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: me.ippolitov.fit.snakes.SnakesProto.GameMessage.StateMsg.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): me.ippolitov.fit.snakes.SnakesProto.GameMessage.StateMsg = _builder.build()

      /**
       * <pre>
       * Состояние игрового поля
       * </pre>
       *
       * <code>required .snakes.GameState state = 1;</code>
       */
      public var state: me.ippolitov.fit.snakes.SnakesProto.GameState
        @JvmName("getState")
        get() = _builder.getState()
        @JvmName("setState")
        set(value) {
          _builder.setState(value)
        }
      /**
       * <pre>
       * Состояние игрового поля
       * </pre>
       *
       * <code>required .snakes.GameState state = 1;</code>
       */
      public fun clearState() {
        _builder.clearState()
      }
      /**
       * <pre>
       * Состояние игрового поля
       * </pre>
       *
       * <code>required .snakes.GameState state = 1;</code>
       * @return Whether the state field is set.
       */
      public fun hasState(): kotlin.Boolean {
        return _builder.hasState()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializeannouncementMsg")
  public inline fun announcementMsg(block: me.ippolitov.fit.snakes.GameMessageKt.AnnouncementMsgKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameMessage.AnnouncementMsg =
    me.ippolitov.fit.snakes.GameMessageKt.AnnouncementMsgKt.Dsl._create(me.ippolitov.fit.snakes.SnakesProto.GameMessage.AnnouncementMsg.newBuilder()).apply { block() }._build()
  public object AnnouncementMsgKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: me.ippolitov.fit.snakes.SnakesProto.GameMessage.AnnouncementMsg.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: me.ippolitov.fit.snakes.SnakesProto.GameMessage.AnnouncementMsg.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): me.ippolitov.fit.snakes.SnakesProto.GameMessage.AnnouncementMsg = _builder.build()

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      public class GamesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * Идущие игры (не менее одной, а на сервере их может быть несколько)
       * </pre>
       *
       * <code>repeated .snakes.GameAnnouncement games = 1;</code>
       */
       public val games: com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameAnnouncement, GamesProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getGamesList()
        )
      /**
       * <pre>
       * Идущие игры (не менее одной, а на сервере их может быть несколько)
       * </pre>
       *
       * <code>repeated .snakes.GameAnnouncement games = 1;</code>
       * @param value The games to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addGames")
      public fun com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameAnnouncement, GamesProxy>.add(value: me.ippolitov.fit.snakes.SnakesProto.GameAnnouncement) {
        _builder.addGames(value)
      }
      /**
       * <pre>
       * Идущие игры (не менее одной, а на сервере их может быть несколько)
       * </pre>
       *
       * <code>repeated .snakes.GameAnnouncement games = 1;</code>
       * @param value The games to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignGames")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameAnnouncement, GamesProxy>.plusAssign(value: me.ippolitov.fit.snakes.SnakesProto.GameAnnouncement) {
        add(value)
      }
      /**
       * <pre>
       * Идущие игры (не менее одной, а на сервере их может быть несколько)
       * </pre>
       *
       * <code>repeated .snakes.GameAnnouncement games = 1;</code>
       * @param values The games to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllGames")
      public fun com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameAnnouncement, GamesProxy>.addAll(values: kotlin.collections.Iterable<me.ippolitov.fit.snakes.SnakesProto.GameAnnouncement>) {
        _builder.addAllGames(values)
      }
      /**
       * <pre>
       * Идущие игры (не менее одной, а на сервере их может быть несколько)
       * </pre>
       *
       * <code>repeated .snakes.GameAnnouncement games = 1;</code>
       * @param values The games to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllGames")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameAnnouncement, GamesProxy>.plusAssign(values: kotlin.collections.Iterable<me.ippolitov.fit.snakes.SnakesProto.GameAnnouncement>) {
        addAll(values)
      }
      /**
       * <pre>
       * Идущие игры (не менее одной, а на сервере их может быть несколько)
       * </pre>
       *
       * <code>repeated .snakes.GameAnnouncement games = 1;</code>
       * @param index The index to set the value at.
       * @param value The games to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setGames")
      public operator fun com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameAnnouncement, GamesProxy>.set(index: kotlin.Int, value: me.ippolitov.fit.snakes.SnakesProto.GameAnnouncement) {
        _builder.setGames(index, value)
      }
      /**
       * <pre>
       * Идущие игры (не менее одной, а на сервере их может быть несколько)
       * </pre>
       *
       * <code>repeated .snakes.GameAnnouncement games = 1;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearGames")
      public fun com.google.protobuf.kotlin.DslList<me.ippolitov.fit.snakes.SnakesProto.GameAnnouncement, GamesProxy>.clear() {
        _builder.clearGames()
      }

    }
  }
  @kotlin.jvm.JvmName("-initializediscoverMsg")
  public inline fun discoverMsg(block: me.ippolitov.fit.snakes.GameMessageKt.DiscoverMsgKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameMessage.DiscoverMsg =
    me.ippolitov.fit.snakes.GameMessageKt.DiscoverMsgKt.Dsl._create(me.ippolitov.fit.snakes.SnakesProto.GameMessage.DiscoverMsg.newBuilder()).apply { block() }._build()
  public object DiscoverMsgKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: me.ippolitov.fit.snakes.SnakesProto.GameMessage.DiscoverMsg.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: me.ippolitov.fit.snakes.SnakesProto.GameMessage.DiscoverMsg.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): me.ippolitov.fit.snakes.SnakesProto.GameMessage.DiscoverMsg = _builder.build()
    }
  }
  @kotlin.jvm.JvmName("-initializejoinMsg")
  public inline fun joinMsg(block: me.ippolitov.fit.snakes.GameMessageKt.JoinMsgKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameMessage.JoinMsg =
    me.ippolitov.fit.snakes.GameMessageKt.JoinMsgKt.Dsl._create(me.ippolitov.fit.snakes.SnakesProto.GameMessage.JoinMsg.newBuilder()).apply { block() }._build()
  public object JoinMsgKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: me.ippolitov.fit.snakes.SnakesProto.GameMessage.JoinMsg.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: me.ippolitov.fit.snakes.SnakesProto.GameMessage.JoinMsg.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): me.ippolitov.fit.snakes.SnakesProto.GameMessage.JoinMsg = _builder.build()

      /**
       * <pre>
       * Тип присоединяющегося игрока
       * </pre>
       *
       * <code>optional .snakes.PlayerType player_type = 1 [default = HUMAN];</code>
       */
      public var playerType: me.ippolitov.fit.snakes.SnakesProto.PlayerType
        @JvmName("getPlayerType")
        get() = _builder.getPlayerType()
        @JvmName("setPlayerType")
        set(value) {
          _builder.setPlayerType(value)
        }
      /**
       * <pre>
       * Тип присоединяющегося игрока
       * </pre>
       *
       * <code>optional .snakes.PlayerType player_type = 1 [default = HUMAN];</code>
       */
      public fun clearPlayerType() {
        _builder.clearPlayerType()
      }
      /**
       * <pre>
       * Тип присоединяющегося игрока
       * </pre>
       *
       * <code>optional .snakes.PlayerType player_type = 1 [default = HUMAN];</code>
       * @return Whether the playerType field is set.
       */
      public fun hasPlayerType(): kotlin.Boolean {
        return _builder.hasPlayerType()
      }

      /**
       * <pre>
       * Имя игрока
       * </pre>
       *
       * <code>required string player_name = 3;</code>
       */
      public var playerName: kotlin.String
        @JvmName("getPlayerName")
        get() = _builder.getPlayerName()
        @JvmName("setPlayerName")
        set(value) {
          _builder.setPlayerName(value)
        }
      /**
       * <pre>
       * Имя игрока
       * </pre>
       *
       * <code>required string player_name = 3;</code>
       */
      public fun clearPlayerName() {
        _builder.clearPlayerName()
      }
      /**
       * <pre>
       * Имя игрока
       * </pre>
       *
       * <code>required string player_name = 3;</code>
       * @return Whether the playerName field is set.
       */
      public fun hasPlayerName(): kotlin.Boolean {
        return _builder.hasPlayerName()
      }

      /**
       * <pre>
       * Глобально уникальное имя игры, к которой хотим присоединиться
       * </pre>
       *
       * <code>required string game_name = 4;</code>
       */
      public var gameName: kotlin.String
        @JvmName("getGameName")
        get() = _builder.getGameName()
        @JvmName("setGameName")
        set(value) {
          _builder.setGameName(value)
        }
      /**
       * <pre>
       * Глобально уникальное имя игры, к которой хотим присоединиться
       * </pre>
       *
       * <code>required string game_name = 4;</code>
       */
      public fun clearGameName() {
        _builder.clearGameName()
      }
      /**
       * <pre>
       * Глобально уникальное имя игры, к которой хотим присоединиться
       * </pre>
       *
       * <code>required string game_name = 4;</code>
       * @return Whether the gameName field is set.
       */
      public fun hasGameName(): kotlin.Boolean {
        return _builder.hasGameName()
      }

      /**
       * <pre>
       * NORMAL, если хотим играть; VIEWER, если хотим только понаблюдать; остальные значения недопустимы
       * </pre>
       *
       * <code>required .snakes.NodeRole requested_role = 5;</code>
       */
      public var requestedRole: me.ippolitov.fit.snakes.SnakesProto.NodeRole
        @JvmName("getRequestedRole")
        get() = _builder.getRequestedRole()
        @JvmName("setRequestedRole")
        set(value) {
          _builder.setRequestedRole(value)
        }
      /**
       * <pre>
       * NORMAL, если хотим играть; VIEWER, если хотим только понаблюдать; остальные значения недопустимы
       * </pre>
       *
       * <code>required .snakes.NodeRole requested_role = 5;</code>
       */
      public fun clearRequestedRole() {
        _builder.clearRequestedRole()
      }
      /**
       * <pre>
       * NORMAL, если хотим играть; VIEWER, если хотим только понаблюдать; остальные значения недопустимы
       * </pre>
       *
       * <code>required .snakes.NodeRole requested_role = 5;</code>
       * @return Whether the requestedRole field is set.
       */
      public fun hasRequestedRole(): kotlin.Boolean {
        return _builder.hasRequestedRole()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializeerrorMsg")
  public inline fun errorMsg(block: me.ippolitov.fit.snakes.GameMessageKt.ErrorMsgKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameMessage.ErrorMsg =
    me.ippolitov.fit.snakes.GameMessageKt.ErrorMsgKt.Dsl._create(me.ippolitov.fit.snakes.SnakesProto.GameMessage.ErrorMsg.newBuilder()).apply { block() }._build()
  public object ErrorMsgKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: me.ippolitov.fit.snakes.SnakesProto.GameMessage.ErrorMsg.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: me.ippolitov.fit.snakes.SnakesProto.GameMessage.ErrorMsg.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): me.ippolitov.fit.snakes.SnakesProto.GameMessage.ErrorMsg = _builder.build()

      /**
       * <pre>
       * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
       * </pre>
       *
       * <code>required string error_message = 1;</code>
       */
      public var errorMessage: kotlin.String
        @JvmName("getErrorMessage")
        get() = _builder.getErrorMessage()
        @JvmName("setErrorMessage")
        set(value) {
          _builder.setErrorMessage(value)
        }
      /**
       * <pre>
       * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
       * </pre>
       *
       * <code>required string error_message = 1;</code>
       */
      public fun clearErrorMessage() {
        _builder.clearErrorMessage()
      }
      /**
       * <pre>
       * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
       * </pre>
       *
       * <code>required string error_message = 1;</code>
       * @return Whether the errorMessage field is set.
       */
      public fun hasErrorMessage(): kotlin.Boolean {
        return _builder.hasErrorMessage()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializeroleChangeMsg")
  public inline fun roleChangeMsg(block: me.ippolitov.fit.snakes.GameMessageKt.RoleChangeMsgKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameMessage.RoleChangeMsg =
    me.ippolitov.fit.snakes.GameMessageKt.RoleChangeMsgKt.Dsl._create(me.ippolitov.fit.snakes.SnakesProto.GameMessage.RoleChangeMsg.newBuilder()).apply { block() }._build()
  public object RoleChangeMsgKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: me.ippolitov.fit.snakes.SnakesProto.GameMessage.RoleChangeMsg.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: me.ippolitov.fit.snakes.SnakesProto.GameMessage.RoleChangeMsg.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): me.ippolitov.fit.snakes.SnakesProto.GameMessage.RoleChangeMsg = _builder.build()

      /**
       * <code>optional .snakes.NodeRole sender_role = 1;</code>
       */
      public var senderRole: me.ippolitov.fit.snakes.SnakesProto.NodeRole
        @JvmName("getSenderRole")
        get() = _builder.getSenderRole()
        @JvmName("setSenderRole")
        set(value) {
          _builder.setSenderRole(value)
        }
      /**
       * <code>optional .snakes.NodeRole sender_role = 1;</code>
       */
      public fun clearSenderRole() {
        _builder.clearSenderRole()
      }
      /**
       * <code>optional .snakes.NodeRole sender_role = 1;</code>
       * @return Whether the senderRole field is set.
       */
      public fun hasSenderRole(): kotlin.Boolean {
        return _builder.hasSenderRole()
      }

      /**
       * <code>optional .snakes.NodeRole receiver_role = 2;</code>
       */
      public var receiverRole: me.ippolitov.fit.snakes.SnakesProto.NodeRole
        @JvmName("getReceiverRole")
        get() = _builder.getReceiverRole()
        @JvmName("setReceiverRole")
        set(value) {
          _builder.setReceiverRole(value)
        }
      /**
       * <code>optional .snakes.NodeRole receiver_role = 2;</code>
       */
      public fun clearReceiverRole() {
        _builder.clearReceiverRole()
      }
      /**
       * <code>optional .snakes.NodeRole receiver_role = 2;</code>
       * @return Whether the receiverRole field is set.
       */
      public fun hasReceiverRole(): kotlin.Boolean {
        return _builder.hasReceiverRole()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun me.ippolitov.fit.snakes.SnakesProto.GameMessage.copy(block: me.ippolitov.fit.snakes.GameMessageKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameMessage =
  me.ippolitov.fit.snakes.GameMessageKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun me.ippolitov.fit.snakes.SnakesProto.GameMessage.PingMsg.copy(block: me.ippolitov.fit.snakes.GameMessageKt.PingMsgKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameMessage.PingMsg =
  me.ippolitov.fit.snakes.GameMessageKt.PingMsgKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun me.ippolitov.fit.snakes.SnakesProto.GameMessage.SteerMsg.copy(block: me.ippolitov.fit.snakes.GameMessageKt.SteerMsgKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameMessage.SteerMsg =
  me.ippolitov.fit.snakes.GameMessageKt.SteerMsgKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun me.ippolitov.fit.snakes.SnakesProto.GameMessage.AckMsg.copy(block: me.ippolitov.fit.snakes.GameMessageKt.AckMsgKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameMessage.AckMsg =
  me.ippolitov.fit.snakes.GameMessageKt.AckMsgKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun me.ippolitov.fit.snakes.SnakesProto.GameMessage.StateMsg.copy(block: me.ippolitov.fit.snakes.GameMessageKt.StateMsgKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameMessage.StateMsg =
  me.ippolitov.fit.snakes.GameMessageKt.StateMsgKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val me.ippolitov.fit.snakes.SnakesProto.GameMessage.StateMsgOrBuilder.stateOrNull: me.ippolitov.fit.snakes.SnakesProto.GameState?
  get() = if (hasState()) getState() else null

@kotlin.jvm.JvmSynthetic
public inline fun me.ippolitov.fit.snakes.SnakesProto.GameMessage.AnnouncementMsg.copy(block: me.ippolitov.fit.snakes.GameMessageKt.AnnouncementMsgKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameMessage.AnnouncementMsg =
  me.ippolitov.fit.snakes.GameMessageKt.AnnouncementMsgKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun me.ippolitov.fit.snakes.SnakesProto.GameMessage.DiscoverMsg.copy(block: me.ippolitov.fit.snakes.GameMessageKt.DiscoverMsgKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameMessage.DiscoverMsg =
  me.ippolitov.fit.snakes.GameMessageKt.DiscoverMsgKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun me.ippolitov.fit.snakes.SnakesProto.GameMessage.JoinMsg.copy(block: me.ippolitov.fit.snakes.GameMessageKt.JoinMsgKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameMessage.JoinMsg =
  me.ippolitov.fit.snakes.GameMessageKt.JoinMsgKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun me.ippolitov.fit.snakes.SnakesProto.GameMessage.ErrorMsg.copy(block: me.ippolitov.fit.snakes.GameMessageKt.ErrorMsgKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameMessage.ErrorMsg =
  me.ippolitov.fit.snakes.GameMessageKt.ErrorMsgKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun me.ippolitov.fit.snakes.SnakesProto.GameMessage.RoleChangeMsg.copy(block: me.ippolitov.fit.snakes.GameMessageKt.RoleChangeMsgKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameMessage.RoleChangeMsg =
  me.ippolitov.fit.snakes.GameMessageKt.RoleChangeMsgKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val me.ippolitov.fit.snakes.SnakesProto.GameMessageOrBuilder.pingOrNull: me.ippolitov.fit.snakes.SnakesProto.GameMessage.PingMsg?
  get() = if (hasPing()) getPing() else null

public val me.ippolitov.fit.snakes.SnakesProto.GameMessageOrBuilder.steerOrNull: me.ippolitov.fit.snakes.SnakesProto.GameMessage.SteerMsg?
  get() = if (hasSteer()) getSteer() else null

public val me.ippolitov.fit.snakes.SnakesProto.GameMessageOrBuilder.ackOrNull: me.ippolitov.fit.snakes.SnakesProto.GameMessage.AckMsg?
  get() = if (hasAck()) getAck() else null

public val me.ippolitov.fit.snakes.SnakesProto.GameMessageOrBuilder.stateOrNull: me.ippolitov.fit.snakes.SnakesProto.GameMessage.StateMsg?
  get() = if (hasState()) getState() else null

public val me.ippolitov.fit.snakes.SnakesProto.GameMessageOrBuilder.announcementOrNull: me.ippolitov.fit.snakes.SnakesProto.GameMessage.AnnouncementMsg?
  get() = if (hasAnnouncement()) getAnnouncement() else null

public val me.ippolitov.fit.snakes.SnakesProto.GameMessageOrBuilder.joinOrNull: me.ippolitov.fit.snakes.SnakesProto.GameMessage.JoinMsg?
  get() = if (hasJoin()) getJoin() else null

public val me.ippolitov.fit.snakes.SnakesProto.GameMessageOrBuilder.errorOrNull: me.ippolitov.fit.snakes.SnakesProto.GameMessage.ErrorMsg?
  get() = if (hasError()) getError() else null

public val me.ippolitov.fit.snakes.SnakesProto.GameMessageOrBuilder.roleChangeOrNull: me.ippolitov.fit.snakes.SnakesProto.GameMessage.RoleChangeMsg?
  get() = if (hasRoleChange()) getRoleChange() else null

public val me.ippolitov.fit.snakes.SnakesProto.GameMessageOrBuilder.discoverOrNull: me.ippolitov.fit.snakes.SnakesProto.GameMessage.DiscoverMsg?
  get() = if (hasDiscover()) getDiscover() else null

