//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: snakes.proto

package me.ippolitov.fit.snakes;

@kotlin.jvm.JvmName("-initializegameAnnouncement")
public inline fun gameAnnouncement(block: me.ippolitov.fit.snakes.GameAnnouncementKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameAnnouncement =
  me.ippolitov.fit.snakes.GameAnnouncementKt.Dsl._create(me.ippolitov.fit.snakes.SnakesProto.GameAnnouncement.newBuilder()).apply { block() }._build()
public object GameAnnouncementKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: me.ippolitov.fit.snakes.SnakesProto.GameAnnouncement.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: me.ippolitov.fit.snakes.SnakesProto.GameAnnouncement.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): me.ippolitov.fit.snakes.SnakesProto.GameAnnouncement = _builder.build()

    /**
     * <pre>
     * Текущие игроки
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 1;</code>
     */
    public var players: me.ippolitov.fit.snakes.SnakesProto.GamePlayers
      @JvmName("getPlayers")
      get() = _builder.getPlayers()
      @JvmName("setPlayers")
      set(value) {
        _builder.setPlayers(value)
      }
    /**
     * <pre>
     * Текущие игроки
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 1;</code>
     */
    public fun clearPlayers() {
      _builder.clearPlayers()
    }
    /**
     * <pre>
     * Текущие игроки
     * </pre>
     *
     * <code>required .snakes.GamePlayers players = 1;</code>
     * @return Whether the players field is set.
     */
    public fun hasPlayers(): kotlin.Boolean {
      return _builder.hasPlayers()
    }

    /**
     * <pre>
     * Параметры игры
     * </pre>
     *
     * <code>required .snakes.GameConfig config = 2;</code>
     */
    public var config: me.ippolitov.fit.snakes.SnakesProto.GameConfig
      @JvmName("getConfig")
      get() = _builder.getConfig()
      @JvmName("setConfig")
      set(value) {
        _builder.setConfig(value)
      }
    /**
     * <pre>
     * Параметры игры
     * </pre>
     *
     * <code>required .snakes.GameConfig config = 2;</code>
     */
    public fun clearConfig() {
      _builder.clearConfig()
    }
    /**
     * <pre>
     * Параметры игры
     * </pre>
     *
     * <code>required .snakes.GameConfig config = 2;</code>
     * @return Whether the config field is set.
     */
    public fun hasConfig(): kotlin.Boolean {
      return _builder.hasConfig()
    }

    /**
     * <pre>
     * Можно ли новому игроку присоединиться к игре (есть ли место на поле)
     * </pre>
     *
     * <code>optional bool can_join = 3 [default = true];</code>
     */
    public var canJoin: kotlin.Boolean
      @JvmName("getCanJoin")
      get() = _builder.getCanJoin()
      @JvmName("setCanJoin")
      set(value) {
        _builder.setCanJoin(value)
      }
    /**
     * <pre>
     * Можно ли новому игроку присоединиться к игре (есть ли место на поле)
     * </pre>
     *
     * <code>optional bool can_join = 3 [default = true];</code>
     */
    public fun clearCanJoin() {
      _builder.clearCanJoin()
    }
    /**
     * <pre>
     * Можно ли новому игроку присоединиться к игре (есть ли место на поле)
     * </pre>
     *
     * <code>optional bool can_join = 3 [default = true];</code>
     * @return Whether the canJoin field is set.
     */
    public fun hasCanJoin(): kotlin.Boolean {
      return _builder.hasCanJoin()
    }

    /**
     * <pre>
     * Глобально уникальное имя игры, например "my game"
     * </pre>
     *
     * <code>required string game_name = 4;</code>
     */
    public var gameName: kotlin.String
      @JvmName("getGameName")
      get() = _builder.getGameName()
      @JvmName("setGameName")
      set(value) {
        _builder.setGameName(value)
      }
    /**
     * <pre>
     * Глобально уникальное имя игры, например "my game"
     * </pre>
     *
     * <code>required string game_name = 4;</code>
     */
    public fun clearGameName() {
      _builder.clearGameName()
    }
    /**
     * <pre>
     * Глобально уникальное имя игры, например "my game"
     * </pre>
     *
     * <code>required string game_name = 4;</code>
     * @return Whether the gameName field is set.
     */
    public fun hasGameName(): kotlin.Boolean {
      return _builder.hasGameName()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun me.ippolitov.fit.snakes.SnakesProto.GameAnnouncement.copy(block: me.ippolitov.fit.snakes.GameAnnouncementKt.Dsl.() -> kotlin.Unit): me.ippolitov.fit.snakes.SnakesProto.GameAnnouncement =
  me.ippolitov.fit.snakes.GameAnnouncementKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val me.ippolitov.fit.snakes.SnakesProto.GameAnnouncementOrBuilder.playersOrNull: me.ippolitov.fit.snakes.SnakesProto.GamePlayers?
  get() = if (hasPlayers()) getPlayers() else null

public val me.ippolitov.fit.snakes.SnakesProto.GameAnnouncementOrBuilder.configOrNull: me.ippolitov.fit.snakes.SnakesProto.GameConfig?
  get() = if (hasConfig()) getConfig() else null

